import java_cup.runtime.*;
import java.util.*;

action code {:  

	static final int C_TL=0;
	static final int C_AU=1;
	static final int C_AI=2;
	static final int C_DS=3;
	static final int C_DE=4;
	static final int C_IP=5;
	static final int C_RS=6;
	static final int C_RE=7;
	static final int C_LP=8;
	static final int C_NH=9;
	static final int C_SH=10;
	static final int C_PP=11;
	static final int C_B=12;
	static final int C_I=13;
	static final int C_R=14;
	static final int C_LG=15;
	static final int C_NL=16;
	static final int C_SM=17;
	static final int C_UL=18;
	static final int C_TS=19;
	static final int C_TE=20;
	static final int C_N_L=21;
	static final int C_O_UL=22;
	static final int C_O_OL=23;
	static final int C_O_DL=24;
	static final int C_O_TR=25;
	static final int C_O_TD=26;
	
	static String code_table[][]= 
		{{"<BR><CENTER><H1>","</H1></CENTER>"},	// TL
		 {"<BR><CENTER><I>","</I></CENTER>"},	// AU	
		 {"<BR><CENTER><B>","</B></CENTER>"},	// AI
		 {"",""},				// DS
		 {"",""},				// DE
		 {"<DT>","<DD>"},			// IP
		 {"",""},				// LP
		 {"",""},				// RS
		 {"",""},				// RE
		 {"<LI>",""},				// NH	
		 {"<LI>",""},				// SH
		 {"<P>",""},				// PP
		 {"<B>","</B>"},			// B
		 {"<I>","</I>"},			// I
		 {"",""},				// R
		 {"<BIG>","</BIG>"},			// LG
		 {"",""},				// NL 
		 {"<SMALL>","</SMALL>"},		// SM
		 {"<U>","</U>"},			// UL
		 {"<TABLE",">"},			// TS 
		 {"</TABLE>",""},			// TE 
		 {"<BR>","<BR><BR>"},			// N_L (own New Line)
		 {"<UL>","</UL>"},			// O_UL (Own Unordered List)
		 {"<OL>","</OL>"},			// O_OL (own Ordered List)
		 {"<DL>","</DL>"},			// O_DL (own Descritive List)
		 {"<TR>","</TR>"},			// O_TR (own Table Row)
		 {"<TD","</TD>"}			// O_TD (own Table Column)
		};
		
 	boolean center, box; 
	String tab= new String("");
	int row_n, row_max, n_columns;
	String rows[][];

 :};

parser code {:	public Yylex lexer;
 :};

init with {: 	        lexer = new Yylex(System.in); :};
scan with {:		return lexer.yylex();  :};


/* Terminals (tokens returned by the scanner). */
terminal token	 TL,AU,AI,DS,DE,IP,RS,RE,LP,NH,SH,PP,B,I,R,LG,NL,SM,UL,N_L,CR,TS,TE,TC_;
terminal str_token   TXT,T_OPT,T_FORM,T_ROW;

/* Non terminals */
non terminal symbol	ini, body, text,text_nl, new_line, commons, nesteds, ip_list, nh_list, sh_list, options, format,format2, rows;
non terminal int_token  tag,tag_nl;
non terminal str_token  argument;


/* The grammar */

ini ::= {: System.out.println("<HTML>\n<HEAD>\n</HEAD>\n<BODY>\n"); :}
	body
	{: System.out.println("</BODY>\n</HTML>\n"); :}
	|
	{: System.out.println("<HTML>\n<HEAD>\n</HEAD>\n<BODY>\n"); :}
	new_line
	body
	{: System.out.println("</BODY>\n</HTML>\n"); :}
	;

body ::= commons
	body
	|
	nesteds
	body
	|
	;

commons ::= tag:n 		/* tag without argument */
	{: System.out.println(code_table[n.int_val][0]); :}
	new_line
	text
	{: System.out.println(code_table[n.int_val][1]); :}
	;
commons ::= tag:n		 /* tag with argument */
	{: System.out.println(code_table[n.int_val][0]); :}
	TXT:t
	{: System.out.println(t.str_val); :}
	new_line
	{: System.out.println(code_table[n.int_val][1]); :}
	text
	;
commons ::= tag_nl:n
	{: System.out.println(code_table[n.int_val][0]); :}
	new_line
	text_nl
	{: System.out.println(code_table[n.int_val][1]); :}
	;
commons ::= tag_nl:n 
	{: System.out.println(code_table[n.int_val][0]); :}
	TXT:t
	{: System.out.println(t.str_val+" <BR>"); :}
	new_line
	{: System.out.println(code_table[n.int_val][1]); :}
	text
	;
commons ::= TS
	{:
		center=false;
		box=false;
		tab="\t";	
	:}
	options
	format
	rows
	text
	;
	

nesteds ::= IP
	{: System.out.println(code_table[C_O_DL][0]); :}  /* dl */
	{: System.out.println(code_table[C_IP][0]); :} /*dt*/
	argument:n	  
	{: System.out.println(n.str_val); :}
	{: System.out.println(code_table[C_IP][1]); :} /* dd */
	text     
	ip_list
	{: System.out.println(code_table[C_O_DL][1]); :} /* /dl */
	text
	;
ip_list::= 	RS
		new_line
		{: System.out.println(code_table[C_N_L][0]); :}
		text
		nesteds
		ip_list
		|
		IP
		{: System.out.println(code_table[C_IP][0]); :}  /*dt*/
		argument:n
		{: System.out.println(n.str_val); :}
		{: System.out.println(code_table[C_IP][1]); :}  /*dd*/
		text 
		ip_list
		|
		commons
		ip_list
		|
		RE
		new_line
		|
		LP
		new_line
		;

nesteds ::= SH
	{: System.out.println(code_table[C_O_UL][0]); :}  /* ul */
	new_line
	{: System.out.println(code_table[C_SH][0]); :} /*li*/
	text
	sh_list
	{: System.out.println(code_table[C_O_UL][1]); :}  /* /ul */
	text
	;	
sh_list::= 	RS
		new_line
		{: System.out.println(code_table[C_N_L][0]); :}
		text
		nesteds
		sh_list
		|
		SH
		{: System.out.println(code_table[C_SH][0]); :}  /*li*/ 
		new_line
		text 
		sh_list
		|
		commons
		sh_list
		|
		RE
		new_line
		|
		LP
		new_line
		;
nesteds ::= NH
	{: System.out.println(code_table[C_O_OL][0]); :}  /* ol */
	new_line
	{: System.out.println(code_table[C_NH][0]); :} 
	text
	nh_list
	{: System.out.println(code_table[C_O_OL][1]); :}
	text
	;	
nh_list::= 	RS
		new_line
		{: System.out.println(code_table[C_N_L][0]); :}
		text
		nesteds
		nh_list
		|
		NH
		{: System.out.println(code_table[C_NH][0]); :}  /*li*/ 
		new_line
		text 
		nh_list
		|
		commons
		nh_list
		|
		RE
		new_line
		|
		LP
		new_line
		;

options ::=
	{:
	  System.out.println("<BR>");
	  System.out.print(code_table[C_TS][0]);
	  System.out.println(code_table[C_TS][1]);
	:}
	
	|
	
	T_OPT:n
	{:
	  System.out.println("<BR>");
	  if((n.str_val).indexOf("center") != -1) {
	  	System.out.println("<CENTER>");  
		center=true;
	  }	
	  System.out.print(code_table[C_TS][0]); 
	  boolean expand=false;	
	  if((n.str_val).indexOf("expand") != -1) {
	  	System.out.print(" WIDTH=100%");
		expand=true;
	  }
	  int pos=(n.str_val).indexOf("tab(");
	  if( pos!= -1) {
	  	tab=(n.str_val).substring(pos+4,pos+5);
	  }
	  
	  if((n.str_val).indexOf("doublebox") != -1) {
		System.out.print(" BORDER=3");
		System.out.println(code_table[C_TS][1]); 
		System.out.println(code_table[C_O_TR][0]); 
		System.out.println(code_table[C_O_TD][0]+">"); 
		System.out.print(code_table[C_TS][0]); 
		if(expand)
		  	System.out.print(" WIDTH=100%");
		System.out.println(code_table[C_TS][1]); 
		box=true;
	  }
	  else 
	  if((n.str_val).indexOf("allbox") != -1)
	  {	System.out.print(" BORDER");
		System.out.println(code_table[C_TS][1]);
	  }
	  else 
	  if((n.str_val).indexOf("box") != -1)
	  {	System.out.print(" BORDER");
		System.out.println(code_table[C_TS][1]); 
		System.out.println(code_table[C_O_TR][0]); 
		System.out.println(code_table[C_O_TD][0]+">"); 
		System.out.print(code_table[C_TS][0]); 
		if(expand)
		  	System.out.print(" WIDTH=100%");
		System.out.println(code_table[C_TS][1]); 
		box=true;
	  }	
	  else
		System.out.println(code_table[C_TS][1]); 

	:}
	;
	
format ::= T_FORM:n
	{:
	  StringTokenizer subst= new StringTokenizer(n.str_val," ");
	  n_columns=subst.countTokens();
	  rows = new String [99][n_columns];
	  
	  row_n=0; 		
	  int j=0;
	  while (subst.hasMoreTokens()) {
		rows[row_n][j]= subst.nextToken();
		j++;
	  }  
	:}
	format2
	;
format2 ::=  T_FORM:n
	{:
	  StringTokenizer subst= new StringTokenizer(n.str_val," ");
	  int j=0;
	  row_n++;
	  while (subst.hasMoreTokens()) {
		rows[row_n][j]= subst.nextToken();
		j++;
	  } 
	:}
	format2
	|
	{: row_max=row_n;
	   row_n=0;
	:}
	;

rows ::=  T_ROW:m
	{:
 	  System.out.println(code_table[C_O_TR][0]); 
 	  StringTokenizer subst=new StringTokenizer(m.str_val,tab);
 	  int j=0;
	  while ((j<n_columns)&&(subst.hasMoreTokens())) {
		if (!rows[row_n][j].equals("s")) {
			int aux=j+1;
			int n_span=1;
			while ((aux<n_columns)&&(rows[row_n][aux].equals("s"))) {
				n_span++;
				aux++;
			}
			System.out.print(code_table[C_O_TD][0]);
			char cell=rows[row_n][j].charAt(0);
			switch (cell) {
			  case 'c':	System.out.print(" ALIGN=CENTER");
			  	break;
			  case 'l':	System.out.print(" ALIGN=LEFT");
			  	break;
			  case 'n': 	System.out.print(" ALIGN=RIGHT");
			  	break;
			  case 'r': 	System.out.print(" ALIGN=RIGHT");
			  	break;
			  default: break;
			}
			System.out.print(" COLSPAN="+n_span);
			System.out.print(" > ");
			System.out.print(subst.nextToken());
			System.out.println(code_table[C_O_TD][1]);
		}
		j++;
	  }
	  if(row_max>row_n) row_n++;
	  System.out.println(code_table[C_O_TR][1]);
	:}
	rows
	;
rows ::= TC_
	format
	rows
	;
rows ::= TE
	{:
	  System.out.println(code_table[C_TE][0]);
	  if(box) {
		System.out.println(code_table[C_O_TD][1]);
		System.out.println(code_table[C_O_TR][1]);
		System.out.println(code_table[C_TE][0]);
	  }
	  if(center)  System.out.println("</CENTER>");
	  System.out.println("<BR>");	
	:}
	new_line
	;
	
	

tag ::= TL
	{: RESULT.int_val = C_TL; :}
	; 
tag_nl ::= AU 
	{: RESULT.int_val = C_AU; :}
	;
tag_nl ::= AI 
	{: RESULT.int_val = C_AI; :}
	;
tag_nl ::= DS
	{: System.out.println(code_table[C_TS][0]+code_table[C_TS][1]); 
	   System.out.println(code_table[C_O_TR][0]);
	   System.out.println(code_table[C_O_TD][0]+">");
	   System.out.println(code_table[C_O_TD][1]);
	   System.out.println(code_table[C_O_TD][0]+">"); 
	   RESULT.int_val = C_DS; 
	:}
	;
tag ::= DE
	{: System.out.println(code_table[C_O_TD][1]);
	   System.out.println(code_table[C_O_TR][1]);
	   System.out.println(code_table[C_TE][0]);
	   RESULT.int_val = C_DE; :}
	;
tag ::= PP
	{: RESULT.int_val = C_PP; :}
	;
tag ::= B
	{: RESULT.int_val = C_B; :}
	;
tag ::= I
	{: RESULT.int_val = C_I; :}
	;
tag ::= R
	{: RESULT.int_val = C_R; :}
	;
tag ::= LG
	{: RESULT.int_val = C_LG; :}
	;
tag ::= NL
	{: RESULT.int_val = C_NL; :}
	;
tag ::= SM
	{: RESULT.int_val = C_SM; :}
	;
tag ::= UL
	{: RESULT.int_val = C_UL; :}
	;
	
text ::= 
	| 
	TXT:n 
	{: System.out.println(n.str_val); :}
	new_line
	text
	;

text_nl ::=	
	| 
	TXT:n 
	{: System.out.println(n.str_val+"<BR>"); :}
	new_line
	text_nl
	;

new_line ::=	CR
		| 
		N_L
                {: System.out.println(code_table[C_N_L][1]); :}
                |
                N_L
                {: System.out.println(code_table[C_N_L][1]); :}
                new_line
		;

argument ::=	TXT:n
		new_line
		{: RESULT.str_val= n.str_val; :}
		|
		new_line
		{: RESULT.str_val= ""; :}
		;
	